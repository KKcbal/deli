{
  
    
        "post0": {
            "title": "3.10 Lists",
            "content": "",
            "url": "https://kkcbal.github.io/deli/lists/",
            "relUrl": "/lists/",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "3.8 Iteration and 3.10 Lists - Overview",
            "content": "Overview . In this post, we go over the key points you need to know about lists and iteration. In general, we start with lists since understanding lists is an important step in understanding iteration. . 3.10 - Lists . Here are some key takeaways. . Lists are a good way to organize and collect data in a program, as they allow a set of potentially very different items to be found within one object. | Items in lists are located with indexes, which, in most code languages, start with 0 (though the pseudocode used by CollegeBoard usually starts at 1!). | Using functions like append(), pop(), and insert(), you can add new things to a list. | Keeping items within lists allow you to apply a function to each item of a list using iteration. | . 3.8 - Iteration . Here are some key takeaways. . Iteration is the repetition of a function. Allowing a function to repeat on its own based on various conditions can vastly optimize a program. | Iteration is most often done with loops, typically in combination with lists and/or dictionaries. | There are multiple types of loops, and while most types can, in some way, do the same thing as other types, some things are simpler to do with certain loops than others. | .",
            "url": "https://kkcbal.github.io/deli/2022/11/30/keypointsoverview.html",
            "relUrl": "/2022/11/30/keypointsoverview.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lists and Iteration Homework",
            "content": "The Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the stuff we talked about. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . questions = [ #questions go here (remember to make them strings!) ] def questionloop(): #make an iterative function to ask the questions #this can be any loop you want as long as it works! def answercheck(): #make a function to check if the answer was correct or not . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the score the user&#39;s score and determine whether or not they passed | .",
            "url": "https://kkcbal.github.io/deli/l&ihomework/",
            "relUrl": "/l&ihomework/",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Different Types of Loops",
            "content": "For Loops . These loops are good for applying a certain alogrithm or function to an entire list of similar things. However, how many times the function iterates is not as controllable. . list = [&quot;cheese&quot;, 328, 3.1415926, True] # This for loop show what the type of everything in the list is for thing in list: print(type(thing)) . &lt;class &#39;str&#39;&gt; &lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;bool&#39;&gt; . For loops are mostly useful for applying a function to everything in a list one-by-one. It&#39;s technically possible to make for loops act the same as other loops, but it often takes a lot more work-arounds. . numlist = [3, 6, 93, 247, 33338, 32, 211] newlist = [] for number in numlist: #this loop generates a new list with the numlist values divided by 2 newlist.append(number / 2) print(newlist) #it is more difficult, for example, to detect the index of the list objects newerlist = [] index = 0 #with this loop, this new variable is necessary for number in numlist: #this only applies the division to even indexes if index % 2 == 0: newerlist.append(number / 2) else: newerlist.append(number) index += 1 print(newerlist) . [1.5, 3.0, 46.5, 123.5, 16669.0, 16.0, 105.5] [1.5, 6, 46.5, 247, 16669.0, 32, 105.5] . Recursive Loops . Recursive loops can be created in multiple different ways, and involve incrementing a variable until it reaches a certain break point. This can be a good type of loop to use when you want to limit the starting point, for example. . list = [&quot;Benjamin&quot;, &quot;Franklin&quot;, &quot;Lightbulbs&quot;, &quot;Kites&quot;, &quot;Scams&quot;] def recursive_loop(i): if i &lt; len(list): print(list[i]) recursive_loop(i+1) else: return # This will print the whole list recursive_loop(0) print(&quot;&quot;) # This will print only the last three things print(&quot;Things associated with Benjamin Franklin:&quot;) recursive_loop(2) . Benjamin Franklin Lightbulbs Kites Scams Things associated with Benjamin Franklin: Lightbulbs Kites Scams . Unlike the for loop from before, because i always represents the current index of the list in question, we don&#39;t need to include the extra index variable. . numlist = [3, 6, 93, 247, 33338, 32, 211] newerlist = [] def recursive_num(i): if i &lt; len(numlist): if i % 2 == 0: newerlist.append(numlist[i] / 2) else: newerlist.append(numlist[i]) recursive_num(i + 1) else: print(newerlist) #even though we were able to omit that index variable, #some would argue this is more complicated recursive_num(0) . [1.5, 6, 46.5, 247, 16669.0, 32, 105.5] . While Loops . While loops are very similar to recursive loops, but with a different syntax. . While loops don&#39;t require a function that is then called again within the original function until a condition is met. While functions perform all the way through, and if the condition is still satisfied afterward, the while loop will repeat again. . list = [&quot;Sample&quot;, &quot;Text&quot;, &quot;For&quot;, &quot;Learning&quot;] def while_loop(): i = 0 while i &lt; len(list): print(list[i]) i += 1 # This will print the whole list while_loop() . Sample Text For Learning . And here&#39;s a while loop version of the function from before. . numlist = [3, 6, 93, 247, 33338, 32, 211] newerlist = [] def while_num(): i = 0 while i &lt; len(numlist): if i % 2 == 0: newerlist.append(numlist[i] / 2) else: newerlist.append(numlist[i]) i += 1 print(newerlist) #this version has a bit less clutter than recursive with one less if/else while_num() . [1.5, 6, 46.5, 247, 16669.0, 32, 105.5] . A Hack for This Lesson . This isn&#39;t homework, but doing this and showing it on your review ticket will definitely boost your grade! . Create a loop that converts 8-bit binary values from a list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;0010111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] def binary_convert(binary): #use this function to convert every binary value in binarylist to decimal #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results . At the end, reflect on which type of loop was the easiest/most efficient to use and consider why. . HINT . .",
            "url": "https://kkcbal.github.io/deli/diftypesofloops/",
            "relUrl": "/diftypesofloops/",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Some lesson",
            "content": "Iteration . Running a statement through code until it&#39;s true. The first video talked about running a statement through code until it&#39;s true . I = 1 while I &lt; 5: print(I) I += 1 . 1 2 3 4 . It was talking about a statement going through a condition until it&#39;s true . The videos use a fake coding language that doesn&#39;t really have a 1:1 translation to python or javascript. The other two videos were talking about REPEAT functions and REPEAT UNTIL functions. The repeat function will repeat a function a set number of times and the repeat until is basically a while function . list = [1, 2, 3, 4] for n in list: print(&quot;i&quot;) . i i i i . You can emulate a repeat function using a for loop, like I did above. It&#39;ll loop for each item in the list, so you can plug in a list that has the same amount of items as you want loops. . Lists . The first video talks about for loops to loop through a list. They also list some code you can apply to lists . list = [1, 2, 3] print(list) print(list[2]) list.append(4) print(list) list.pop(1) print(list) list.insert(1, 2) print(list) x = list[1] print(x) print(len(list)) . [1, 2, 3] 3 [1, 2, 3, 4] [1, 3, 4] [1, 2, 3, 4] 2 4 . This is basically everything they listed that you can do with lists. The second video also talks about for loops. They insert if statments to count things in a list, though . list = [&quot;cat&quot;, &quot;dog&quot;, &quot;dog&quot;, &quot;cat&quot;, &quot;cat&quot;, &quot;cat&quot;] d = 0 c = 0 for n in list: if n == &quot;dog&quot;: d += 1 if n == &quot;cat&quot;: c += 1 print(list) print(d) print(c) . [&#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;] 2 4 . The third video was about recursive loops. It was using a function that looped to remove words that were 3 letters long. . list = [&quot;men&quot;, &quot;boom&quot;, &quot;gamer&quot;, &quot;big&quot;, &quot;no&quot;] def recursive_loop(n): if n &lt; len(list): if len(list[n]) == 3: list.pop(n) recursive_loop(n + 1) print(list) recursive_loop(0) print(list) . [&#39;men&#39;, &#39;boom&#39;, &#39;gamer&#39;, &#39;big&#39;, &#39;no&#39;] [&#39;boom&#39;, &#39;gamer&#39;, &#39;no&#39;] . That&#39;s basically what they did in the third video. code written by Drew. .",
            "url": "https://kkcbal.github.io/deli/2022/11/16/somelesson.html",
            "relUrl": "/2022/11/16/somelesson.html",
            "date": " • Nov 16, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kkcbal.github.io/deli/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kkcbal.github.io/deli/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}